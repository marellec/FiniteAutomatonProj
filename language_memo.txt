

For this finite automaton, 

An enum holds every state in Q, the state set.
An FA object holds the current state (q0) and transition function (δ).

The current state is always set to one of these states of Q.

For each letter given, the FA checks the 
current state (q) and the given letter to determine the next state 
by passing them into the transition function (δ).

The transition function (δ) is implemented using a match 
for the current state and if/else checks for the given letter.
Whether the FA should output "LOCK" or "UNLOCK" is also determined 
by if/else checks, when q matches the CHECK state.

For FAInteractive, the user can enter an entire string without separation,
or enter one at a time, and as many digits as they want. 
The program responds to each character individually.

For RCInteractive, the FA is fed randomized digits one at a time until the it unlocks.
This is repeated as many times as the user wants, showing them the max/min/avg.


ESTIMATION - RANDOM CRACKING 

Informally, it would take about (10^6 = 1000000) tries to guess 
a 6 digit code, if the length is known.
But since the length is unknown, I treated this as a problem of 
the expected number of coin flips needed to get 6 heads in a row.  
That number is 111100.


REGEX

The regular expression is [d]*[849851+849854]+[d]*


LANGUAGE

An automaton can be represented by a 5-tuple (Q, δ, q0, I, O), where −

Q is a finite set of states.

    states: { _1, _2, _3, _4, CHECK, NEUTRAL }

q0 is the initial state from where any input is processed (q0 ∈ Q).

    initial state = NEUTRAL

I is a finite set of symbols, called the alphabet of the automaton.

    input alphabet: { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }

O is a set of outputs of the automaton.

    outputs: { "", "UNLOCK\n", "LOCK\n" }

δ is the transition function.

    δ(NEUTRAL, '0') = (NEUTRAL, "")
    δ(NEUTRAL, '1') = (NEUTRAL, "")
    δ(NEUTRAL, '2') = (NEUTRAL, "")
    δ(NEUTRAL, '3') = (NEUTRAL, "")
    δ(NEUTRAL, '4') = (NEUTRAL, "")
    δ(NEUTRAL, '5') = (NEUTRAL, "")
    δ(NEUTRAL, '6') = (NEUTRAL, "")
    δ(NEUTRAL, '7') = (NEUTRAL, "")
    δ(NEUTRAL, '8') = (_1, "")
    δ(NEUTRAL, '9') = (NEUTRAL, "")

    δ(_1, '0') = (NEUTRAL, "")
    δ(_1, '1') = (NEUTRAL, "")
    δ(_1, '2') = (NEUTRAL, "")
    δ(_1, '3') = (NEUTRAL, "")
    δ(_1, '4') = (_2, "")
    δ(_1, '5') = (NEUTRAL, "")
    δ(_1, '6') = (NEUTRAL, "")
    δ(_1, '7') = (NEUTRAL, "")
    δ(_1, '8') = (NEUTRAL, "")
    δ(_1, '9') = (NEUTRAL, "")

    δ(_2, '0') = (NEUTRAL, "")
    δ(_2, '1') = (NEUTRAL, "")
    δ(_2, '2') = (NEUTRAL, "")
    δ(_2, '3') = (NEUTRAL, "")
    δ(_2, '4') = (NEUTRAL, "")
    δ(_2, '5') = (NEUTRAL, "")
    δ(_2, '6') = (NEUTRAL, "")
    δ(_2, '7') = (NEUTRAL, "")
    δ(_2, '8') = (NEUTRAL, "")
    δ(_2, '9') = (_3, "")

    δ(_3, '0') = (NEUTRAL, "")
    δ(_3, '1') = (NEUTRAL, "")
    δ(_3, '2') = (NEUTRAL, "")
    δ(_3, '3') = (NEUTRAL, "")
    δ(_3, '4') = (NEUTRAL, "")
    δ(_3, '5') = (NEUTRAL, "")
    δ(_3, '6') = (NEUTRAL, "")
    δ(_3, '7') = (NEUTRAL, "")
    δ(_3, '8') = (_4, "")
    δ(_3, '9') = (NEUTRAL, "")
    
    δ(_4, '0') = (NEUTRAL, "")
    δ(_4, '1') = (NEUTRAL, "")
    δ(_4, '2') = (NEUTRAL, "")
    δ(_4, '3') = (NEUTRAL, "")
    δ(_4, '4') = (NEUTRAL, "")
    δ(_4, '5') = (CHECK, "")
    δ(_4, '6') = (NEUTRAL, "")
    δ(_4, '7') = (NEUTRAL, "")
    δ(_4, '8') = (NEUTRAL, "")
    δ(_4, '9') = (NEUTRAL, "")

    δ(CHECK, '0') = (NEUTRAL, "")
    δ(CHECK, '1') = (NEUTRAL, "UNLOCK\n")
    δ(CHECK, '2') = (NEUTRAL, "")
    δ(CHECK, '3') = (NEUTRAL, "")
    δ(CHECK, '4') = (NEUTRAL, "LOCK\n")
    δ(CHECK, '5') = (NEUTRAL, "")
    δ(CHECK, '6') = (NEUTRAL, "")
    δ(CHECK, '7') = (NEUTRAL, "")
    δ(CHECK, '8') = (NEUTRAL, "")
    δ(CHECK, '9') = (NEUTRAL, "")


